--#IF HEADLESS
local can_run = true
--#ELSE
local can_run = false
--#ENDIF

udp_port = 12345
udp = socket.udp()
udp:settimeout(0)
udp:setsockname("*", udp_port)

local mp = require("utils.MessagePack")
-- require("utils.message_splitter")

local clients = {}


-- local players = {123, 456}
player_ids = {}

currentLevel = 0
local wait_for_more_players = false


counter = 0

function server_data(data, ip, port)

	-- data_type dictionary
	-- SERVER
	-- 1 = auth  //TBD
	-- 2 = load level
	-- 3 = player input
	-- 4 = heartbeat //TBD
	-- CLIENT
	-- 5 = player load
	-- 6 = player updates
	-- 8 = heartbeat //TBD

	local unpacked_data = mp.unpack(data)
	local player_id = unpacked_data[1]
	local data_type = unpacked_data[2]
	local data_data = unpacked_data[3]

	if not clients[player_id] then
		clients[player_id] = {ip = ip,  port = port}
		print("New client connected: " .. clients[player_id].ip .. ":" .. clients[player_id].port)
	end



	if data_type == 1 then
		--handle auth

	else if data_type == 2 then
		print("level load message received")
		broadcast("from data type 2")
		load_level(player_id, data_data)
	


	elseif data_type == 3 then
		pprint(data_data)
		handle_input(player_id, data_data)

	else
		print("no data type")
	end

	-- local client_steps = unpacked_data[2]
	-- print(unpacked_data[1])
	-- print("input buffer:", dump(unpacked_data[2]))
	-- local player_id, client_steps = mp.unpack(data)
	-- print("Player ID: " .. player_id[1])
	-- local client_steps = mp.unpack(data)
	-- process_player_input(player_id, client_steps, dt)
end 
end 
-- Function to send data to a specific client
function send_to_client(data, client_ip, client_port)
	local msg = mp.pack(data)
	udp:sendto(msg, client_ip, client_port)
end

-- Function to broadcast data to all connected clients
function broadcast(data)
	for key, client_ip_port in pairs(clients) do
		send_to_client(data, client_ip_port.ip, client_ip_port.port)
	end
end


function start_level()
	
	wait_for_more_players = false
	local i = 1

	
	for key, client_ip_port in pairs(clients) do

		local ip = client_ip_port.ip
		local port = client_ip_port.port
		local x,y
		if i == 1 then x,y = -14,-247 end
		if i == 2 then x,y = 1168,-247 end
		if i == 3 then x,y = 1168, 900 end
		if i == 4 then x,y = -14, 900 end

		msg.post("level-01:/level_handler#level_handler", "spawn_other_player", {key,x,y} )
		
		broadcast({key,5,{x,y}})
		print("player spawning at x="..x.." y="..y)
	
		i = i + 1 
	end	
end 


function wait_for_others(seconds, level)
	wait_for_more_players = true
	timer.delay(seconds, false, start_level)

end

local co_wait_for_players = nil

function wait_for_players(ticks, level)
	local co = coroutine.create(function()
		print("Waiting for more players to join...")
		for i = 1, ticks do
			coroutine.yield()
		end
		start_level(level)
	end)
	return co
end


function init(self)
	
	if not can_run then
		go.delete()
		return
	end 

	print("Server started on port " .. udp_port)


	-- random udp port 
	-- rnd.range(49152, 65535)
	


	-- local tank_ids= collectionfactory.create("/spawner#tank_spawner", vmath.vector3(523,100,1))
	-- pprint(tank_ids)

-- 	for key, val in pairs(players) do
-- 		local id = collectionfactory.create("/spawner#player_spawner", vmath.vector3(rnd.range(300, 400),100,1))
-- 		pprint(id)
-- 		-- player_ids.insert(id)
-- 	end
-- 
-- 	pprint(player_ids)

end

function final(self)
	print("server going down!")
	udp:close()
end


function update(self, dt)
		-- print("update")
end

function fixed_update(self, dt)
	local data, ip, port = udp:receivefrom()
	if data then 
		server_data(data, ip, port)
	end
end



if co_wait_for_players then
	local status, err = coroutine.resume(co_wait_for_players)
	if not status then
		print("Error in coroutine:", err)
		co_wait_for_players = nil
	end
end




-- timer.delay(1, false, function() print("print in one second") end)
-- local wait_for_players = coroutine.create(function (seconds, level)
-- 	print("inside coroutine BEFORE DELAY")
-- 	-- timer.delay(seconds, false, start_level)
-- 	-- timer.delay(5, false, function() print("ahhh")end)
-- 	timer.delay(1, true, function() print("print in one second") end)
-- 	print("inside coroutine AFTER DELAY")
-- end)





function load_level(player_id, level)
	if level == 1 then
		-- local current_players = {}
		table.insert(player_ids, player_id)
		
		currentLevel = 1
		msg.post("/level1_proxy#level1_proxy", "load")
		print("server is loading level 1, wait 5 seconds for more players")
		if wait_for_more_players == false then
			timer.delay(5, false, start_level)
			-- co_wait_for_players = wait_for_players(50, level)
			-- wait_for_others(5, level)
		end	
		-- coroutine.resume(wait_for_players, 5, 1)
	elseif level == 2 then
		currentLevel = 2
		msg.post("/level2_proxy#level2_proxy", "load")
	end 
end 



local function process_player_input(player_id, client_steps, dt)
	-- print("client_steps:", dump(client_steps))
	pprint(client_steps)

	local player = players[player_id]
	if not player then
		-- Create a new player instance if it doesn't exist
		player = {
			position = vmath.vector3(),
			speed = 400
		}
		players[player_id] = player
	end
	

	for _, step in ipairs(client_steps) do
		local input_x, input_y, x, y, z = unpack(step)
		local direction = vmath.vector3(input_x, input_y, 0)
		local desired_position = vmath.vector3(x, y, z) + direction * player.speed * dt

		-- Validate the desired position and update the player's position
		player.position = validate_position(player.position, desired_position)
	end
end

function validate_position(current_position, desired_position)
	-- Implement your validation logic here
	-- For example, you can check if the desired position is within a certain distance from the current position
	local max_distance = 100 -- Adjust this value as needed
	local distance = vmath.length(desired_position - current_position)
	if distance <= max_distance then
		return desired_position
	else
		return current_position
	end
end



function on_message(self, message_id, message, sender)

	if message_id == hash("proxy_loaded") then
		if currentLevel ~= 0 then
			-- msg.post("/Main_menu_proxy#main_menu_proxy", "unload")
		end

		if currentLevel == 0 then
			--do nothing/wait for level selection
		elseif currentLevel == 1 then
			broadcast("arrrggg")
			print("level 1 loaded")
			msg.post(sender, "init")
			msg.post(sender, "enable")
			-- load playesr into level 1
		elseif currentLevel == 2 then
			-- load playesr into level 2
		end
	elseif message_id == hash("blah") then
		-- print("i'm down here")
		broadcast("this worked from a messsaaaaage")
end

end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
