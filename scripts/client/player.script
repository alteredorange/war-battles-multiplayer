--#IF HEADLESS
local should_send = false
--#ELSE
local should_send = true
--#ENDIF

go.property("client_id", 0)

local input_buffer = {}
buffer_packet = 1
local buffer_index = 1
local buffer_table = 1
local max_buffer_index = 50

local pack_number = 1

local mp = require("utils.MessagePack")


local IP = "127.0.0.1"
local PORT = 7777
local id = rnd.range(1000, 9999)

current_tick = 0
local update_tick = 0


local function create_tables(table, count)
	for i = 1, count do
		table[i] = {}
	end
end

function init(self)

	
	msg.post(".", "acquire_input_focus") 

	create_tables(input_buffer, max_buffer_index)

	self.moving = false
	self.firing = false -- [3]
	self.input = vmath.vector3() -- [4]
	self.dir = vmath.vector3(0, 1, 0) -- [5]
	self.speed = 400

	self.tick = 0

	-- correction vector
	self.correction = vmath.vector3()


	-- table.insert(input_buffer[buffer_index], {0, 0, 0})


end


function send_client_data(self, table)
	local input_pack = mp.pack({self.client_id, 3, table})
	client:send(input_pack)
end

function final(self)
	msg.post(".", "release_input_focus")
end



	


function update_animation(self)
	local anim_dir = vmath.vector3(self.input.x, self.input.y, 0)

	if anim_dir ~= self.anim_dir then
		if self.anim_id ~= nil then
			sprite.stop_animation(self.anim_id)
			self.anim_id = nil
		end

		if vmath.length(anim_dir) > 0 then
			local anim_name
			if anim_dir.x > 0 then
				anim_name = "player-right"
			elseif anim_dir.x < 0 then
				anim_name = "player-left"
			elseif anim_dir.y > 0 then
				anim_name = "player-up"
			elseif anim_dir.y < 0 then
				anim_name = "player-down"
			else
				anim_name = "player-idle"
			end
			sprite.play_flipbook("#sprite", anim_name)
		end

		self.anim_dir = anim_dir
	end
end

function on_input(self, action_id, action)
	if action_id == hash("up") then
		self.input.y = 1
	elseif action_id == hash("down") then
		self.input.y = -1
	elseif action_id == hash("left") then
		self.input.x = -1
	elseif action_id == hash("right") then
		self.input.x = 1
	elseif action_id == hash("fire") and action.pressed then
		self.firing = true
	end

	if vmath.length(self.input) > 0 then
		self.moving = true
		self.dir = vmath.normalize(self.input)
	end
end

function fixed_update(self, dt)

	update_animation(self)

	if self.moving then
		
		table.insert(input_buffer[buffer_index], {self.input.x, self.input.y, dt})
		
		local pos = go.get_position()
		new_pos = pos + self.dir * (self.speed * dt)
		go.set_position(new_pos)
	end

	if self.firing then
		local angle = math.atan2(self.dir.y, self.dir.x)
		local rot = vmath.quat_rotation_z(angle)
		local props = {dir = self.dir}
		factory.create("#rocketfactory", nil, rot, props)
	end
	
	self.input.x = 0
	self.input.y = 0

	self.moving = false
	self.firing = false


	-- Send movement to server every 10 ticks
	if update_tick == 10 then

		if #input_buffer[buffer_index] ~= 0 then
			local pos = go.get_position()
			-- print(pos)
		

			local sliced_buffer = input_buffer[buffer_index]
			local input_pack = mp.pack({self.client_id, 3, pack_number, {pos.x, pos.y, sliced_buffer}})
			client:send(input_pack)
			pack_number = pack_number + 1
		
	
		if buffer_index < max_buffer_index then
			if #input_buffer[buffer_index + 1] == 0 then
				buffer_index = buffer_index + 1
			else
				print("this buffer isn't empty!")
				input_buffer[buffer_index + 1] = {}
				-- TODO: Handle non-empty buffers
				buffer_index = buffer_index + 1
			end
		else
			if #input_buffer[1] == 0 then
				buffer_index = 1
			else
				print("this buffer isn't empty!")
				input_buffer[1] = {}
				-- TODO: Handle non-empty buffers
				
				buffer_index = 1
			end
	

			
		end
		
	end 
	update_tick = 0

	end

	update_tick = update_tick + 1
end

function on_message(self, message_id, message, sender)

end
