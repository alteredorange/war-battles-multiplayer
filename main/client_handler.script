--#IF HEADLESS
local can_run = false
--#ELSE
local can_run = true
--#ENDIF

local mp = require("utils.MessagePack")

player_id = rnd.range(1000, 9999)

server_address = "127.0.0.1"
server_port = 5555
udp = socket.udp()
udp:settimeout(0)
currentLevel = 0

-- message types
-- 1 = auth
-- 2 = level request
-- 3 = client movement
-- 4 = other player movement
-- 5 = correction (from server)


counter = 0


function init(self)

	if not can_run then
		self.delete()
	end 

	
	msg.post("/Main_menu_proxy#main_menu_proxy", "load")

	-- Add initialization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function fixed_update(self, dt)
	-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
	-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in
	-- Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

local function start_level_client(level)
	local has_started = 0
	local message = mp.pack({player_id, 2, level})
	udp:sendto(message, server_address, server_port)
	-- udp:sendto(message, server_address, server_port)
	-- udp:sendto(message, server_address, server_port)
end 

function on_message(self, message_id, message, sender)
	if message_id == (hash("start_level1")) then
		print("here....")
		currentLevel = 1
		start_level_client(currentLevel)
		msg.post("/level1_proxy#level1_proxy", "load")
		print("there...")
		
	
	elseif message_id == (hash("start_level2")) then
		currentLevel = 2
		msg.post("/level2_proxy#level2_proxy", "load")

	elseif message_id == hash("proxy_loaded") then

		if currentLevel ~= 0 then
			msg.post("/Main_menu_proxy#main_menu_proxy", "unload")
		end
		
		if currentLevel == 0 then
			msg.post("/Main_menu_proxy#main_menu_prox", "acquire_input_focus")
		elseif currentLevel == 1 then
			msg.post("/level1_proxy#level1_proxy", "acquire_input_focus")
		elseif currentLevel == 2 then
			msg.post("/level2_proxy#level2_proxy", "acquire_input_focus")
		end
		

		print("level has loaded")
		pprint(message_id )
	
		msg.post(sender, "init")
		msg.post(sender, "enable")
		
		
	
	end
	
end

function on_input(self, action_id, action)

	
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
