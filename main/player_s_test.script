--#IF HEADLESS
local can_run = true
--#ELSE
local can_run = false
--#ENDIF

require("utils.message_splitter")



-- Spawn a player node

-- go.set_position(tank, vmath.vector3(125, 100, 1))


-- udp:setsockname("127.0.0.1", 5555)
-- contact daytime host
-- assert(udp:sendto("anything", ip, port))
-- retrieve the answer and print results


-- self.server = assert(socket.udp())
-- server:bind('*',TCP_SERVER_PORT)
-- server:listen(32)
-- server:settimeout(0)





function init(self)
	
	if not can_run then
		go.delete()
	end 
	
	udp_port = 5555
	udp = socket.udp()
	udp:setsockname("*", udp_port)
	udp:settimeout(0)
	print("Server started on port " .. udp_port)
	
	-- --set characters
	-- local player_position = vmath.vector3(75, 137, 1)
	-- collectionfactory.create("/spawner#player_spawner", player_position)
	
	local p = vmath.vector3()
	p.x = rnd.range(50, 650)
	p.y = rnd.range(50, 650)
	p.z = 1
	-- print(p)
	-- p.z = 1
	-- p.y = vmath.lerp(math.random(), 100, 500)
	collectionfactory.create("/spawner#tank_spawner", p)
	-- pprint(tank_ids)
	-- Add initialization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	-- print(dt)

end

function fixed_update(self, dt)

	while true do
		
		local data, ip, port = udp:receivefrom()
		if data then

			-- Print the received movement data
			-- print("Received movement data from " .. ip .. ":" .. port .. ": " .. data)
			-- print(data)
			local splitdata = message_splitter(data, "*") 
			-- local user, x, y = string.match(data, "(.*)%,(.*)")
			print(splitdata[4])
		else
			break
		end
	end

	
	-- print(dt)
	-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
	-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in
	-- Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Learn more: https://defold.com/manuals/message-passing/
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
